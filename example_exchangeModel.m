clear all; close all;addpath(genpath('utils'));load('data/rat_pyruvate_slice_dynamic.mat')nf = 4096;% time axisnt = 30;tr = 3;ncutoff = 2;% frequency axisbw = 10000;cf = 3810;f = bw*(1:nf)/nf - cf;spectra = zeros([nf nt]);for ii = 1:nt  thisfid = squeeze(data(:, ii));  thisspectra = abs(fftshift(fft(fftshift(thisfid))));  spectra(:, ii) = thisspectra;
endfor
nsvd = 20;[u, s, v] = svd(spectra);denoisedspectra = spectra * v(:, 1:nsvd) * v(:, 1:nsvd)';####semilogy(diag(s))####figure();##subplot(1,2,1)##waterfall(spectra(1200:1800,:)')##subplot(1,2,2)##waterfall(denoisedspectra(1200:1800,:)')##pyruvate = squeeze(denoisedspectra(1550:1590, :));lactate = squeeze(denoisedspectra(1380:1420, :));bicarb = squeeze(denoisedspectra(1690:1730, :));pyruvate = sum(pyruvate, 1)/1e10;lactate = sum(lactate, 1)/1e10;bicarb = sum(bicarb, 1)/1e11;R1P_est = 1/20; R1L_est = 1/30;kPL_est = .8;    %calculate kpl - normal kpl code broken up a bit to handle data shape%really need to better version control this one..clear params_fixed params_est;params_fixed.R1P = R1P_est;params_fixed.R1L = R1L_est;%params_fixed = [];params_est.kPL = kPL_est;params_est = [];noise_level = [];S = zeros([2, nt]);S(1, : ) = pyruvate;S(2, :) = lactate;flips = ones(size(S))* 3 * pi/180;%[params_fit, Sfit, ufit, sigma] = fit_kPL(S, tr, flips, params_fixed, params_est, noise_level, 0);[params_fit, Sfit, objective_val] = fit_kPL_withgammainput(S, tr, flips, params_fixed, params_est, noise_level, 0);t = (1:nt)*tr;plot(t, lactate, 'o', ...      t, Sfit(1, 2, :), '-', ...      t, pyruvate,'o',...      t, Sfit(1,1,:),'-')legend('lactate', 'lactate fit', 'pyruvate', 'pyruvate fit');